@use "sass:math";

// Flex grid container with negative margins
@mixin flex-grid() {
  $margin: $grid-gutter;

  display: flex;
  flex-wrap: wrap;
  margin-right: -1 * math.div($margin, 2);
  margin-left: -1 * math.div($margin, 2);

  // Loop through the $grid-settings and adjust the grid's negative margin,
  // if values change for the current size
  @each $breakpoint in map-keys($grid-settings) {
    @include media($min: bp($breakpoint)) {
      @if ($margin != get-grid-setting($breakpoint, gutter)) {
        $margin: get-grid-setting($breakpoint, gutter);

        margin-right: -1 * math.div($margin, 2);
        margin-left: -1 * math.div($margin, 2);
      }
    }
  }
}

// Set up the grid item with specific margins for each breakpoint
//
// Note: margin-bottom could be added here to vertically space wrapped items
@mixin flex-grid-item($full-width: true) {
  $margin: $grid-gutter;

  flex: 0 1 auto;
  margin-right: math.div($margin, 2);
  margin-left: math.div($margin, 2);

  // Allow items to be toggled between full width and auto
  @if $full-width {
    width: 100%;
  }

  // Only add a new media query if the gutter setting changed
  @each $breakpoint in map-keys($grid-settings) {
    @if ($margin != get-grid-setting($breakpoint, gutter)) {
      @include media($min: bp($breakpoint)) {
        $margin: get-grid-setting($breakpoint, gutter);

        margin-right: math.div($margin, 2);
        margin-left: math.div($margin, 2);
      }
    }
  }
}

// Calculate the width of a column in relation to total grid columns
@mixin calc-fcol-width($span, $columns, $gutter: $grid-gutter) {
  $width: percentage(math.div($span, $columns));

  width: calc(#{$width} - #{$gutter});
}

// Calculate the width of a column in relation to total grid columns at a specific breakpoint
//
// Usage: @include fcol-width((xs: 2, md: 4));
// This will generate an item that spans 2 columns on xs up and 4 columns on md up
@mixin fcol-width($grid-breakpoints) {
  @each $breakpoint in map-keys($grid-breakpoints) {
    $span: map-get($grid-breakpoints, $breakpoint);
    $gutter: get-grid-setting($breakpoint, gutter);
    $columns: get-grid-setting($breakpoint, columns);

    @include media-up($breakpoint) {
      @include calc-fcol-width($span, $columns, $gutter);
    }
  }
}

// Calculate the offset of a column in relation to total grid columns and gutter
@mixin calc-fcol-offset($offset, $columns, $gutter: $grid-gutter) {
  $num: percentage(math.div($offset, $columns));

  margin-left: calc(#{$num} + #{math.div($gutter, 2)});
}

// Calculate the offset of a column in relation to total grid columns at a specific breakpoint
//
// Usage: @include fcol-offset((xs: 2, md: 4));
// This will generate an item that is offset 2 columns from the left on xs up and 4 columns on md up
@mixin fcol-offset($grid-breakpoints) {
  @each $breakpoint in map-keys($grid-breakpoints) {
    $span: map-get($grid-breakpoints, $breakpoint);
    $gutter: get-grid-setting($breakpoint, gutter);
    $columns: get-grid-setting($breakpoint, columns);

    @include media-up($breakpoint) {
      @include calc-fcol-offset($span, $columns, $gutter);
    }
  }
}
